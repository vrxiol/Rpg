<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Mini RPG Game</title>
  <style>
    canvas { background: #fff; display: block; margin: auto; }
    .controls, .info {
      display: flex; justify-content: center; gap: 10px; margin-top: 10px;
    }
    button { padding: 10px 20px; font-size: 16px; }
    #game-over { display: none; text-align: center; margin-top: 20px; font-size: 24px; color: red; }
  </style>
</head>
<body>

<canvas id="game" width="400" height="300"></canvas>

<div class="controls">
  <button id="left">‚óÄÔ∏è</button>
  <button id="up">üîº</button>
  <button id="down">üîΩ</button>
  <button id="right">‚ñ∂Ô∏è</button>
  <button id="shoot">üî´ ‡∏¢‡∏¥‡∏á</button>
</div>

<div class="info">
  <span id="hp">‚ù§Ô∏è HP: 5</span>
  <span id="score">üéØ Score: 0</span>
</div>

<div id="game-over">
  ‡πÅ‡∏û‡πâ‡πÅ‡∏•‡πâ‡∏ß! <button onclick="restart()">‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà</button>
</div>

<script>
const canvas = document.getElementById('game');
const ctx = canvas.getContext('2d');

const playerImage = new Image();
playerImage.src = 'ee.png';

const bulletImage = new Image();
bulletImage.src = 'ii.png';

const enemyImage = new Image();
enemyImage.src = 'oo.png';

let player = { x: 150, y: 100, width: 32, height: 32, hp: 5 };
let direction = null;
let bullets = [];
let enemyBullets = [];
let score = 0;
let enemies = [];

function createEnemy() {
  const e = {
    x: Math.random() * 300 + 20,
    y: 20,
    width: 32,
    height: 32,
    alive: true,
    dir: 1,
    shootCooldown: 0
  };
  enemies.push(e);
}
setInterval(createEnemy, 3000);

function updatePosition() {
  if (direction === 'up') player.y -= 2;
  if (direction === 'down') player.y += 2;
  if (direction === 'left') player.x -= 2;
  if (direction === 'right') player.x += 2;
}

function shoot() {
  bullets.push({ x: player.x + player.width / 2 - 4, y: player.y, size: 12 });
}

function updateBullets() {
  bullets.forEach(b => b.y -= 4);
  bullets = bullets.filter(b => b.y > 0);
}

function updateEnemyBullets() {
  enemyBullets.forEach(b => b.y += 3);
  enemyBullets = enemyBullets.filter(b => b.y < canvas.height);
}

function drawBullets() {
  bullets.forEach(b => {
    ctx.drawImage(bulletImage, b.x, b.y, b.size, b.size);
  });
}

function drawEnemyBullets() {
  enemyBullets.forEach(b => {
    ctx.fillStyle = 'red';
    ctx.fillRect(b.x, b.y, b.size, b.size);
  });
}

function drawEnemies() {
  enemies.forEach(e => {
    if (e.alive) {
      ctx.drawImage(enemyImage, e.x, e.y, e.width, e.height);
    }
  });
}

function updateEnemies() {
  enemies.forEach(e => {
    if (!e.alive) return;
    e.x += e.dir * 1.5;
    if (e.x < 0 || e.x > canvas.width - e.width) e.dir *= -1;

    e.shootCooldown--;
    if (e.shootCooldown <= 0) {
      enemyBullets.push({ x: e.x + e.width / 2 - 4, y: e.y + e.height, size: 8 });
      e.shootCooldown = Math.floor(Math.random() * 100 + 50);
    }
  });
}

function checkCollisions() {
  bullets.forEach((b, bi) => {
    enemies.forEach(e => {
      if (e.alive &&
          b.x < e.x + e.width &&
          b.x + b.size > e.x &&
          b.y < e.y + e.height &&
          b.y + b.size > e.y) {
        e.alive = false;
        bullets.splice(bi, 1);
        score++;
        document.getElementById('score').textContent = `üéØ Score: ${score}`;
      }
    });
  });

  enemyBullets.forEach((b, bi) => {
    if (
      b.x < player.x + player.width &&
      b.x + b.size > player.x &&
      b.y < player.y + player.height &&
      b.y + b.size > player.y
    ) {
      enemyBullets.splice(bi, 1);
      player.hp--;
      document.getElementById('hp').textContent = `‚ù§Ô∏è HP: ${player.hp}`;
      if (player.hp <= 0) {
        document.getElementById('game-over').style.display = 'block';
        cancelAnimationFrame(loop);
      }
    }
  });
}

function drawPlayer() {
  ctx.drawImage(playerImage, player.x, player.y, player.width, player.height);
}

let loop;
function gameLoop() {
  updatePosition();
  updateBullets();
  updateEnemyBullets();
  updateEnemies();
  checkCollisions();

  ctx.clearRect(0, 0, canvas.width, canvas.height);
  drawPlayer();
  drawBullets();
  drawEnemyBullets();
  drawEnemies();

  loop = requestAnimationFrame(gameLoop);
}

// ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
function bindButton(id, dir) {
  const btn = document.getElementById(id);
  btn.addEventListener('touchstart', () => direction = dir);
  btn.addEventListener('touchend', () => direction = null);
  btn.addEventListener('mousedown', () => direction = dir);
  btn.addEventListener('mouseup', () => direction = null);
  btn.addEventListener('mouseleave', () => direction = null);
}
bindButton('up', 'up');
bindButton('down', 'down');
bindButton('left', 'left');
bindButton('right', 'right');
document.getElementById('shoot').addEventListener('click', shoot);

function restart() {
  player = { x: 150, y: 100, width: 32, height: 32, hp: 5 };
  bullets = [];
  enemyBullets = [];
  enemies = [];
  score = 0;
  document.getElementById('score').textContent = `üéØ Score: 0`;
  document.getElementById('hp').textContent = `‚ù§Ô∏è HP: 5`;
  document.getElementById('game-over').style.display = 'none';
  gameLoop();
}

gameLoop();
</script>

</body>
</html>